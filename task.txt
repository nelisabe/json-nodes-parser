Добрый день,
 
Описание задачи:
 
Структура узла:
Structure {
    String name;// Допустима любая строка
    Enum color;// Допустимы Red, Green, Blue, остальные не допустимы
    int value;// Допустимы положительные числа от 0 - 100 включительно
}
 
Набор узлов описан в JSON файле в виде древовидной структуры.
 
Пример файла:
JSON {
              [
                            {
                                          "name": "AAA",
                                          "color": Red,
                                          "value": 97,
                                          children: [
                                                         {
                                                                       "name": "bc",
                                                                       "color": Blue,
                                                                       "value": 44,
                                                                       children: []
                                                         },
                                                         {
                                                                       "name": "cdr",
                                                                       "color": Red,
                                                                       "value": 88,
                                                                       children: []
                                                         }
                                          ]
                            },
                            {
                                          "name": "DD 45 kl",
                                          "color": Green,
                                          "value": 81,
                                          children: []
                            },
                           
              ],
              [
                            {
                                          "name": "dss_csa",
                                          "color": Blue,
                                          "value": 82,
                                          children: []
                            }
              ]
}
 
Вложенность может быть произвольной глубины.
 
Interface StructInterface {
    void read(String jsonFile);
    void save(String jsonFile);
    Iterator getNode(String path);
    Iterator iterator(BinaryOperator<T> oper);
}
 
String jsonFile - это Json файл в виде строки.
Iterator имеет интерфейс как у java.util.iterator.
BinaryOperator<T> oper - определяет способ обхода и задается пользователем. 1 такой объект по обходу всех элементов дерева должен быть сделан.
 
 
Программа должна:
1. Прочитать JSON файл если формат JSON корректный, иначе вывести информацию об ошибке.
2. Если появляются новые поля, то они должны быть проигнорированы.
3. Должна быть система логирования, настраиваемая через конфигурационный файл
   для уровней: debug(каждая функция), info(интерфейсные методы), error(ошибки). 
4. Если среди значений name, color или value есть недопустимые значения,
   то информация об этом должна быть выведена в лог файл с ошибками log.error.
   Путь до узла в виде name1/name2/name3 должен быть указан.
   Структура не должна быть создана при наличии ошибок.
5. При работе могут быть Exception, они должны быть преобразованы в RuntimeExceptions.
   Должен быть создан набор RuntimeExceptions для сообщений об ошибках.
6. Для интерфейса должен быть JavaDoc.
7. Покрытие кода тестами должно быть 100%.
 